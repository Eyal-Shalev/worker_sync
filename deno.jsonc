{
  "compilerOptions": {
    "lib": [
      "deno.worker"
    ]
  },
  "tasks": {
    "test": "deno test --quiet --shuffle --reload=file://. --import-map=import_map.json -A --lock=lock.json --coverage=coverage/data .",
    "update-lock": "deno cache --import-map=import_map.json --lock=lock.json --lock-write --reload=file://. --unstable scripts/*.ts *_test.ts mod.ts",
    "coverage": "deno task --quiet test && deno coverage --exclude=test --unstable --lcov --output=coverage/profile.lcov coverage/data",
    "coverage-html": "deno task --quiet coverage && genhtml -o=coverage/html coverage/profile.lcov",

    "all": "deno task --quiet test && deno task --quiet bundle-esm & deno task --quiet bundle-iife & deno task --quiet build-npm",

    "build-npm": "deno run --import-map=import_map.json -A --lock=lock.json scripts/build-npm.ts",

    "bundle-esm": "FORMAT=esm deno task --quiet bundle",
    "bundle-esm-full": "FORMAT=esm deno task --quiet bundle-full",
    "bundle-esm-min": "FORMAT=esm deno task --quiet bundle-min",

    "bundle-iife": "FORMAT=iife deno task --quiet bundle",
    "bundle-iife-full": "FORMAT=iife deno task --quiet bundle-full",
    "bundle-iife-min": "FORMAT=iife deno task --quiet bundle-min",

    "bundle": "deno task --quiet bundle-$FORMAT-full & deno task --quiet bundle-$FORMAT-min",
    "bundle-full": "esbuild --bundle --outfile=dist/worker_sync.$FORMAT.js --format=$FORMAT --global-name=worker_sync mod.ts",
    "bundle-min": "esbuild --bundle --minify --outfile=dist/worker_sync.$FORMAT.min.js --format=$FORMAT --global-name=worker_sync mod.ts",

    "clean": "rm -rf coverage dist"
  }
}
